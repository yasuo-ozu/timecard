#!/bin/bash

set -e
shopt -s extglob

DIRECTORY="$(pwd)"
USERS=()
DEFAULT_USER="$(whoami)"
COMMAND=help
COMMENT=
TIME_AT=$(date +%s)
TIME_FROM=
TIME_TO=
ROUNDMETHOD=
FORCE=
RECORDTIMEZONE="$(timedatectl show -p Timezone --value)"
RECORDLOCALE="C"
GITDIRS=()
NOGIT=

show_help() {
	echo "$0 [ -C directory] [init|start|stop|status|show|help]"
	echo ""
	echo "COMMANDS"
	echo "  init:   initialize the directory to use timecard"
	echo "  start:  record the start time"
	echo "  stop:   record the stop time"
	echo "  status: display what you are doing now"
	echo "  show:   output the records"
	echo ""
	echo "OPTIONS"
	echo "  -C directory                 : specify your directory (default: cwd)"
	echo "  -u user --user=user          : specify user name (default: your unix name)"
	echo "  -c comment --comment=comment : comment (only works for 'start')"
	echo "  --at time                    : specify the time (default: now) (sample: '5 minutes ago') (only for 'start', 'stop', 'status')"
	echo "  --from time                  : only works for 'show'"
	echo "  --to time                    : only works for 'show'"
	echo "  --roundmethod method         : round method (sample: XX min [inset|outset|roundup|rounddown|nearest])"
	echo "  --git directory[@@branch]    : specify git directory (multiple is ok)."
	echo "  --no-git                     : do not display git info (only for 'show', 'status')"
	echo "  --force                      : only works for 'init'"
	echo "  --recordtimezone timezone    : specify timezone for recording"
	echo ""
	echo "VARIABLES"
	echo "  TZ=timezone : specify timezone for displaying"
	echo ""
	echo "CONFIG FILE (timecard.txt)"
	echo "  %roundmethod=method"
	echo "  %recordtimezone=timezone"
	echo "  %recordlocale=locale"
	echo "  %defaultuser=user"
	echo "  %git=directory[@@branch]"
	echo ""
	echo "AUTHOR"
	echo "  yasuo ozu"
}

# format_hms second
format_hms() {
	local h=$(( "$1" / ( 60 * 60 ) ))
	local m=$(( ( "$1" % (60 * 60) ) / 60 ))
	local s=$(( "$1" % 60 ))
	echo "${h}h${m}m${s}s"
}

roundoff() {
	read stat nt || true
	local d=1
	local m=nearest
	local spec="$@"
	while [[ "$#" -ge 1 ]]; do
		case "$1" in
			d?(ay?(s)) )
				d=$((d * 24 * 60 * 60))
				;;
			h?(our?(s)) )
				d=$((d * 60 * 60))
				;;
			m?(in?(ute?(s))) )
				d=$((d * 60))
				;;
			s?(ec?(ond?(s))) )
				;;
			"inset" | "outset" | "roundup" | "rounddown" | "nearest")
				spec="$1"
				;;
			[1-9]*?([0-9])?(.+[0-9]) )
				if [[ "$d" -eq 1 ]]; then
					d="$1"
				else
					echo "Bad roundmethod $spec" 1>&2
					exit 1
				fi
				;;
			*)
				echo "Bad roundmethod $spec" 1>&2
				exit 1
				;;
		esac
		shift
	done
	if [[ ! -z "$nt" ]]; then
		d=$(echo "$d" | sed -e 's/\..*$//')
		local half=$(echo "$((d / 2))" | sed -e 's/\..*$//')
		if [[ "$spec" = nearest ]]; then
			r=$(( ( (nt + half) / d) * d))
		elif [[ "$spec" = inset && "$stat" = start || "$spec" = outset && "$stat" = stop || "$spec" = roundup ]]; then
			r=$(( ( (nt + d - 1) / d ) * d))
		else
			r=$(( (nt / d) * d))
		fi
		[[ "$stat" = stop ]] && r=$(( r - 1 ))
		echo $r
	fi
}

read_config() {
	[ ! -f "$1" ] && return
	while read KEY VAL; do
		VAL="$(echo "$VAL" | sed -e 's/^"\(.*\)"$/\1/')"
		case "$KEY" in
			"roundmethod")
				ROUNDMETHOD="$VAL"
				echo "" | roundoff $VAL 1>/dev/null
				;;
			"recordtimezone")
				RECORDTIMEZONE="$VAL"
				;;
			"recordlocale")
				RECORDLOCALE="$VAL"
				;;
			"git")
				GITDIRS+=("$VAL")
				;;
			"defaultuser")
				DEFAULT_USER="$VAL"
				;;
			*)
				echo "bad config %$KEY=$VAL in file $1" 1>&2
				exit 1
			;;
		esac
	done < <(cat "$1" | sed -ne '/^%.*=.*$/p' | sed -e 's/^%\([^=]\+\)=\(.*\)$/\1 \2/')
}

case "$1" in
	"-C")
		shift
		DIRECTORY="$1"
		;;
	\-C?* )
		DIRECTORY="$(echo "$1" | cut -c3-)"
		;;
esac

{
	cd "$DIRECTORY" &>/dev/null
} || {
	echo "Directory '$DIRECTORY' is not available." 1>&2
	exit 1
}
DIRECTORY="$(pwd)"
FNAME="$DIRECTORY/timecard.txt"

read_config "$FNAME"
	
while [[ "$#" -ge 1 ]]; do
	case "$1" in
		"-u" | "--user")
			shift
			USERS+=("$1")
			;;
		\-u?* )
			USERS+=("$(echo "$1" | cut -c3-)")
			;;
		--user=* )
			USERS+=("$(echo "$1" | cut -c8-)")
			;;
		"-c" | "--comment")
			shift
			COMMENT="$1"
			;;
		\-c?* )
			COMMENT="$(echo "$1" | cut -c3-)"
			;;
		--comment=* )
			COMMENT="$(echo "$1" | cut -c11-)"
			;;
		"--at")
			shift
			TIME_AT=$(date --date "$1" +%s)
			;;
		--at=*)
			TIME_AT=$(date --date "$(echo "$1" | cut -c6-)" +%s)
			;;
		"--from")
			shift
			TIME_FROM=$(date --date "$1" +%s)
			;;
		--from=*)
			TIME_FROM=$(date --date "$(echo "$1" | cut -c8-)" +%s)
			;;
		"--to")
			shift
			TIME_TO=$(date --date "$1" +%s)
			;;
		--to=*)
			TIME_TO=$(date --date "$(echo "$1" | cut -c6-)" +%s)
			;;
		"--git")
			shift
			GITDIRS+=("$1")
			;;
		--git=*)
			GITDIRS+=("$(echo "$1" | cut -c7-)")
			;;
		"--no-git")
			NOGIT=y
			;;
		"--rooundmethod")
			shift
			ROUNDMETHOD="$1"
			;;
		--roundmethod=*)
			ROUNDMETHOD="$(echo "$1" | cut -c15-)"
			;;
		"--recordtimezone")
			shift
			RECORDTIMEZONE="$1"
			;;
		--recordtimezone=*)
			RECORDTIMEZONE="$(echo "$1" | cut -c18-)"
			;;
		"--force")
			FORCE=y
			;;
		"init" | "start" | "stop" | "help" | "status" | "show")
			COMMAND="$1"
			;;
		*)
			echo "Cannot recognize the option $1" 1>&2
			exit 1
	esac
	shift
done

if [[ "$COMMAND" = init ]]; then
	if [[ ! -f "$FNAME" || "$FORCE" = y ]]; then
		{
			echo '%roundmethod="1 seconds nearest"'
			echo "%recordtimezone=\"$RECORDTIMEZONE\""
			echo "# %recordlocale=\"$RECORDLOCALE\""
			echo "# %git=directory[@@branch]"
			echo "# %defaultuser=username"
			echo ""
			echo "# USER START STOP COMMENT"
		} > "$FNAME"
		echo "Created file '$FNAME'"
	else
		echo "File '$FNAME' already exists" 1>&2
		exit 1
	fi
else
	if [[ ! -f "$FNAME" ]]; then
		echo "File '$FNAME' not found" 1>&2
		exit 1
	fi
	case "$COMMAND" in
		help)
			show_help
			exit 0
			;;
		start)
			if [[ "${#USERS[@]}" -eq 0 ]]; then
				USERS+=("$DEFAULT_USER")
			fi
			for USER in ${USERS[@]}; do
				TM="$(echo "start $TIME_AT" | roundoff $ROUNDMETHOD)"
				TM="$(LC_ALL="$RECORDLOCALE" TZ="$RECORDTIMEZONE" date --date \@$TM)"
				printf "%s\t%s\t%s\t%s\n" "$USER" "$TM" "x" "$COMMENT" >> "$FNAME"
			done
			;;
		stop)
			if [[ "${#USERS[@]}" -eq 0 ]]; then
				USERS+=("$DEFAULT_USER")
			fi
			if [[ -n "$COMMENT" ]]; then
				echo "Comment cannot spicified with stop command" 1>&2
				exit 1
			fi
			for USER in ${USERS[@]}; do
				export QUOTED_USER="$USER"
				TMb="$(echo "stop $TIME_AT" | roundoff $ROUNDMETHOD)"
				TM="$(LC_ALL="$RECORDLOCALE" TZ="$RECORDTIMEZONE" date --date \@$TMb)"
				NLINE=$(cat "$FNAME" | sed -e 's/^[#%].*$//' | awk '{FS="\t";if(NF>0&&$1=="'"$USER"'"&&$3=="x"){print NR "\t" $1 "\t" $2 "\t" "'"$TM"'" "\t" $4}}' | tail -n 1)
				if [[ -z "$NLINE" ]]; then
					echo "No pending tasks for user '$USER'"
				else
					NM=$(echo "$NLINE" | cut -f 1)
					ST=$(echo "$NLINE" | cut -f 3)
					CM=$(echo "$NLINE" | cut -f 5)
					NLINE="$(echo "$NLINE" | cut -f 2-)"
					sed -i "$FNAME" -e "${NM}a $NLINE"
					sed -i "$FNAME" -e "${NM}d"
					echo "$USER worked $(date -u +%H:%M:%S --date "@$((1 + TMb - $(date +%s --date "$ST") ))") for work '$CM'"
				fi
			done
			;;
		show)
			mdate=
			mlist=()
			mlistc=0
			mshift="  "
			mgitlastd=0
			# display_git $prefix $time
			display_git() {
				[[ "$NOGIT" = y ]] && return 0
				[[ "$mgitlastd" -ge "$2" ]] && return 0
				export prefix="$1"
				export start="$mgitlastd"
				export stop="$2"
				mgitlastd="$2"
				export GITDIRS
				for GITDIR in "${GITDIRS[@]}"; do
					BRANCH=master
					if echo "$GITDIR" | grep -q "@@"; then
						BRANCH=$(echo "$GITDIR" | sed -e 's/^.*@@\([^@]*\)$/\1/')
						GITDIR=$(echo "$GITDIR" | sed -e 's/^\(.*\)@@[^@]*$/\1/')
					fi
					git --git-dir="$GITDIR/.git" log "$BRANCH" --after="$start" --before="$stop" --pretty="format:$prefix%ad $GITDIR %an %h %s" --date="format:%H:%M:%S"
				done | sort
			}
			# close_task "$LINE"
			close_task() {
				local rstart="$(echo "$1" | cut -f 2)"
				local rstop="$(echo "$1" | cut -f 3)"
				local rstarts=$(date --date "$rstart" +%s)
				local rstops=$(date --date "$rstop" +%s)
				local rstopf="$(date --date "@$rstops" +%H:%M:%S)"
				local rdur=$(( rstops - rstarts + 1 ))
				display_git "$mshift# " "$rstops"
				mshift="$(echo "$mshift" | sed -e 's/...$//')"
				echo "$mshift\\- $rstopf (dur: $(format_hms $rdur))"
			}
			# open_task "$LINE"
			open_task() {
				local ruser="$(echo "$1" | cut -f 1)"
				local rstart="$(echo "$1" | cut -f 2)"
				local rstarts="$(date --date="$rstart" +%s)"
				local rstartf=$(date --date "$rstart" +%H:%M:%S)
				local rcomment="$(echo "$1" | cut -f 4)"
				display_git "$mshift#" "$rstarts"
				echo "$mshift/- $rstartf $ruser $rcomment"
				mshift="${mshift}|  "
			}
			check_user_and_time() {
				[[ -n "$TIME_FROM" && "$3" -lt "$TIME_FROM" ]] && return 1
				[[ -n "$TIME_TO" && "$2" -ge "$TIME_TO" ]] && return 1
				[[ "${#USERS[@]}" -eq 0 ]] && return 0
				for us in "${USERS[@]}"; do
					[[ "$us" = "$1" ]] && return 0
				done
				return 1
			}
			while read LINE; do
				vuser="$(echo "$LINE" | cut -f 1)"
				vstarts="$(date --date "$(echo "$LINE" | cut -f 2)" +%s)"
				vstartf="$(date --date "@$vstarts")"
				vends="$(date --date "$(echo "$LINE" | cut -f 3)" +%s)"
				vcomment="$(echo "$LINE" | cut -f 4)"
				vstartdatef="$(date --date "@$vstarts" +%D)"
				vstartdates="$(date --date "$vstartdatef" +%s)"
				if [[ ! "$mdate" = "$vstartdates" ]]; then
					mdate="$vstartdates"
					pnewstartf="$(LC_ALL="RECORDLOCALE" TZ="$RECORDTIMEZONE" date --date "@$vstartdates")"
					pnewstopf="$(LC_ALL="$RECORDLOCALE" TZ="$RECORDTIMEZONE" date --date "@$((vstartdates - 1))")"
					[[ "$mlistc" -gt 0 ]] && for ((i=mlistc; i > 0; i--)); do
						pline="${mlist[$i]}"
						pend="$(echo "$pline" | cut -f 3)"
						pends="$(date --date "$pend" +%s)"
						if [[ "$pend" = "x" || "$pends" -ge "$vstartdates" ]]; then
							mlist[$i]=$(echo "$pline" | awk -F "\t" '{print $1 "\t" "'"$pnewstartf"'" "\t" $3 "\t" $4}')
							close_task "$(echo "$pline" | awk -F "\t" '{print $1 "\t" $2 "\t" "'"$pnewstopf"'" "\t" $4}')"
						else
							close_task "$pline"
							mlistc=$((mlistc - 1))
						fi
					done
					echo "$vstartdatef"
					[[ "$mlistc" -gt 0 ]] && for ((i=1; i<=mlistc; i++)); do
						open_task "${mlist[$i]}"
					done
				fi
				if check_user_and_time "$vuser" "$vstarts" "$vends"; then
					dstarts="$(date --date "$(echo "$LINE" | cut -f 2)" +%s)"
					[[ "$mlistc" -gt 0 ]] && for ((i=mlistc; i > 0; i--)); do
						pline="${mlist[$i]}"
						pstop="$(echo "$pline" | cut -f 3)"
						pstops="$(date --date "$pstop" +%s)"
						[[ "$pstop" = x || "$pstops" -gt "$dstarts" ]] && break
						close_task "$pline"
						mlistc=$((mlistc - 1))
					done
					mlistc=$((mlistc + 1))
					mlist[$mlistc]="$LINE"
					open_task "$LINE"
				fi
			done < <(cat "$FNAME" | sed -e '/^\([#%].*\|\s*\)$/d')
			[[ "$mlistc" -gt 0 ]] && for ((; mlistc > 0; mlistc--)); do
				pline="${mlist[$mlistc]}"
				pstop="$(echo "$pline" | cut -f 3)"
				[[ "$pstop" = x ]] && break
				close_task "${mlist[$mlistc]}"
			done
			display_git "$mshift#" "$TIME_AT"
			;;
		status)
			if [[ "${#USERS[@]}" -eq 0 ]]; then
				USERS+=("$DEFAULT_USER")
			fi
			for USER in "${USERS[@]}"; do
				echo "Pending tasks for '$USER':"
				poldstartday=
				while read LINE; do
					pstarts=$(date --date "$(echo "$LINE" | cut -f 1)" +%s)
					pstartf="$(date --date "@$pstarts" +%H:%M:%S)"
					pstartdayf="$(date --date "@$pstarts" +%D)"
					pcomment=$(echo "$LINE" | cut -f 2)
					[[ ! "$poldstartday" = "$pstartdayf" ]] && echo "$pstartdayf"
					poldstartday="$pstartdayf"
					pdur=$(format_hms $((TIME_AT - pstarts)) )
					echo "  $pstartf (dur: $pdur) $pcomment"
				done < <(cat "$FNAME" | sed -e 's/^[#%].*$//' | awk '{FS="\t";if(NF>0&&$1=="'"$USER"'"&&$3=="x"){print $2 "\t" $4 }}')
			done
			;;
		*)
			show_help 1>&2
			exit 1
			;;
	esac
fi

